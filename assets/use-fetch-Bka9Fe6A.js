import{g as l,r as w,e as j}from"./index-yY5FG0bt.js";async function E(s,{state:n,country:r,company_id:e,searchQuery:o,descriptionQuery:t,page:c=1,limit:i=9}){let a=(await l(s)).from("jobs").select("*, company:companies(name,logo_url), saved: saved_jobs(id)",{count:"exact"}).order("created_at",{ascending:!1});n&&(a=a.ilike("state",`%${n}%`)),r&&(a=a.ilike("country",`%${r}%`)),e&&(a=a.eq("company_id",e)),o&&(a=a.ilike("title",`%${o}%`)),t&&(a=a.ilike("description",`%${t}%`));const u=(c-1)*i,d=u+i-1;a=a.range(u,d);const{data:m,error:p,count:f}=await a;if(p)throw console.error("Error fetching Jobs:",p),p;return{jobs:m,total:f,page:c,limit:i}}async function J(s,{alreadySaved:n},r){const e=await l(s);if(n){let o=e.from("saved_jobs").delete().eq("job_id",r.job_id);const{data:t,error:c}=await o;return c?(console.error("Error Deleting Saved Jobs:",c),null):t}else{let o=e.from("saved_jobs").insert([r]).select();const{data:t,error:c}=await o;return c?(console.error("Error Inserting Saved Jobs:",c),null):t}}async function _(s,{job_id:n}){const r=await l(s),{data:e,error:o}=await r.from("jobs").select("*, company:companies(name,logo_url), applications: applications(*)").eq("id",n).single();return o?(console.error("Error fetching Job:",o),null):e}async function v(s,{job_id:n},r){const e=await l(s),{data:o,error:t}=await e.from("jobs").update({isOpen:r}).eq("id",n).select();return t?(console.error("Error Updating Job:",t),null):o}async function S(s,n,r){const e=await l(s),{data:o,error:t}=await e.from("jobs").insert([r]).select();if(t)throw console.error(t),new Error("Error Creating Job");return o}async function q(s){const n=await l(s),{data:r,error:e}=await n.from("saved_jobs").select("*, job: jobs(*, company: companies(name,logo_url))");return e?(console.error("Error fetching Saved Jobs:",e),null):r}async function h(s,{recruiter_id:n,searchQuery:r,descriptionQuery:e,page:o=1,limit:t=9}){let i=(await l(s)).from("jobs").select("*, company:companies(name,logo_url), saved: saved_jobs(id)",{count:"exact"}).eq("recruiter_id",n).order("created_at",{ascending:!1});r&&(i=i.ilike("title",`%${r}%`));const b=(o-1)*t,a=b+t-1;i=i.range(b,a);const{data:u,error:d,count:m}=await i;return d?(console.error("Error fetching Jobs:",d),null):{jobs:u,total:m,page:o,limit:t}}async function k(s,{job_id:n}){const r=await l(s),{data:e,error:o}=await r.from("jobs").delete().eq("id",n).select();return o&&console.error("Error deleting job:",o),e}const $=(s,n={})=>{const[r,e]=w.useState(void 0),[o,t]=w.useState(null),[c,i]=w.useState(null),[b,a]=w.useState(null),{session:u,isLoaded:d}=j();return{fn:async(...p)=>{if(!d||!u){i("Session is not loaded or not available.");return}t(!0),i(null);try{const f=await u.getToken({template:"jobportaldb"}),g=await s(f,n,...p);if(!g)throw new Error("No response received");e(g),typeof g=="object"&&"total"in g?a(g.total):a(null)}catch(f){console.error("Fetch error:",f),i(f.message||"Failed to fetch data"),e(null)}finally{t(!1)}},data:r,loading:o,error:c,totalItems:b}};export{q as a,S as b,h as c,k as d,_ as e,v as f,E as g,J as s,$ as u};
